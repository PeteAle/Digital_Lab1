/*
 * File:   Lab1.c
 * Author: Peter Yau
 * Carnet: 17914
 * Created on January 24, 2020, 10:36 AM
 */

// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT    // Oscillator Selection bits (RC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, RC on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF               // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF              // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF               // RE3/MCLR pin function select bit (RE3/MCLR pin function is MCLR)
#pragma config CP = OFF                 // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF                // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF              // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF               // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF              // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF                // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>

int contador = 0;
int contador2 = 0;
int i = 0;
int j = 0;

void setup(void);
void semaforo(void);
void delay_sem(void);
void delay_btn(void);
void j2(void);

void main(void) {
    setup();
    semaforo();
    while (PORTD == 0xC0){
        if (PORTCbits.RC0 == 1){
            if (PORTA == 0x01 || PORTA == 0x02 || PORTA == 0x04 || PORTA == 0x08 || PORTA == 0x10 || PORTA == 0x20 || PORTA == 0x40){
                PORTA *= 2;
                delay_btn();   
                }
            else if (PORTA == 0x00){
                PORTA += 1;
                delay_btn();
            }
        }
        if (PORTCbits.RC6 == 1){
            if (PORTB == 0x01 || PORTB == 0x02 || PORTB == 0x04 || PORTB == 0x08 || PORTB == 0x10 || PORTB == 0x20 || PORTB == 0x40){
                PORTB *= 2;
                delay_btn();
            }
            else if (PORTB == 0x00){
                PORTB += 1;
                delay_btn();
            }
        }
    }
    return;
}

void setup(void){
    TRISA = 0x00;
    TRISB = 0x00;
    TRISC = 0x49;
    TRISD = 0x00;
    PORTA = 0x00;
    PORTB = 0x00;
    PORTD = 0xFF;
    PORTC = 0x00;
    ANSEL = 0x00;
    ANSELH = 0x00;
    return;
}

void delay_sem(void){
    for (i = 0; i <= 255; i ++){
        contador += contador;
        for (j = 0; j <= 100; j ++){
            contador2 += contador2;
        }
    }
}

void delay_btn(void){
    for (i = 0; i <= 200; i ++){
        contador += contador;
        for (j = 0; j <= 20; j ++){
            contador2 += contador2;
        }
    }
}

void semaforo(void){
    if (PORTCbits.RC3 != 0){
        //delay_ms();
        PORTD = 0xB0;
        PORTCbits.RC2 = 1;
        PORTCbits.RC4 = 0;
        PORTCbits.RC5 = 0;
        delay_sem();
        PORTD = 0xA4;
        PORTCbits.RC2 = 0;
        PORTCbits.RC4 = 0;
        PORTCbits.RC5 = 1;
        delay_sem();
        PORTD = 0xF9;
        PORTCbits.RC2 = 0;
        PORTCbits.RC4 = 1;
        PORTCbits.RC5 = 0;
        delay_sem();
        PORTD = 0xC0;
        PORTCbits.RC2 = 1;
        PORTCbits.RC5 = 1;
        PORTCbits.RC4 = 1;
        delay_sem();
    }
        
}

void j2(void){
    if (PORTD == 0xC0){
        if (PORTCbits.RC0 == 1){
            PORTA += 1;
        }
        else if (PORTCbits.RC6 == 1){
            PORTB += 1;
        }
        return;
    }
}

void j1(void){
    if (PORTD == 0x3F){
        if (PORTCbits.RC6 == 1){
            PORTB += 1;
        }
        return
    }
}
