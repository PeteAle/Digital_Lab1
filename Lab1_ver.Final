/*
 * File:   Lab1.c
 * Author: Peter Yau
 * Carnet: 17914
 * Created on January 24, 2020, 10:36 AM
 */

// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT    // Oscillator Selection bits (RC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, RC on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF               // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF              // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF               // RE3/MCLR pin function select bit (RE3/MCLR pin function is MCLR)
#pragma config CP = OFF                 // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF                // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF              // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF               // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF              // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF                // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>

int contador = 0;   // Variable utilizada para el delay.
int contador2 = 0;  // Segunda variable utilizada para el delay.
int cont3 = 0;      // Tercera variable utilizada para el delay.
int i = 0;          // Variable utilizada para la condición de 'if' en el delay.
int j = 0;          // Segunda variable que va a incrementar en una condición 'if' de delay.
int j1 = 0;         // Variable para el anti-rebotes del jugador 1.
int j2 = 0;         // Variable para el anti-rebotes del jugador 2.

void setup(void);       // Setup del PIC.
void semaforo(void);    // Función para el semáforo.
void delay_sem(void);   // Delay para la cuenta regresiva del semáforo.

void main(void) {
    setup();            // Se llamó la función de setup para el PIC.
    semaforo();         // Se llamó la función del semáforo para iniciar la carrera.
    while (PORTD == 0xC0){  // Mientras el 7-segmentos despliegue el valor de cero...
        if (PORTCbits.RC0 == 1){    // Entra a un 'if' para verificar si el jugador 1 presiona su botón.
            if (PORTA == 0x01 || PORTA == 0x02 || PORTA == 0x04 || PORTA == 0x08 || PORTA == 0x10 || PORTA == 0x20 || PORTA == 0x40){
                j1 = 1;     // Siempre y cuando, los LEDs que estén encendidos sea diferente al primero y al último, entra a esta posición.
                if (PORTCbits.RC0 == 0 && j1 == 1){ // Cuando el botón se suelta, y el valor j1 sean los respectivos,
                    PORTA *= 2;                     // se multiplica el puerto A por 2, para que el incremento sea en
                    j1 = 0;                         // décadas, no binario.
                }  
            }
            else if (PORTA == 0x00){    // En caso que el puerto A esté en cero...
                j1 = 1;                 
                if (PORTCbits.RC0 == 0 && j1 == 1){ // Y se cumple esta condición
                    PORTA += 1;                     // Un botonazo hace que se haga una suma.
                    j1 = 0;
                }
            }
            else if (PORTCbits.RC0 == 1 && PORTA == 0x80){  // Si el último LED está encendido y se lee un botonazo, la función
                j1 = 1;                                     // entra.
                if (PORTCbits.RC0 == 0 && j1 == 1){         // Cuando se cumple que se soltó el botón y j1 == 1,
                    PORTA = 0;                              // Se vacía puerto A, y se enciende el LED amarillo del ganador.
                    PORTCbits.RC1 = 1;
                    PORTD = 0xF9;                           // Se depliega en el 7-segmentos el número del jugador ganador.
                    j1 = 0;
                    delay_sem();                            // Delay para que se pueda ver el número en el 7-segmentos.
                }
            }
        }
        if (PORTCbits.RC6 == 1){        // El proceso que se hizo para el jugador 1 se repite para el jugador 2.
            if (PORTB == 0x01 || PORTB == 0x02 || PORTB == 0x04 || PORTB == 0x08 || PORTB == 0x10 || PORTB == 0x20 || PORTB == 0x40){
                j2 = 1;
                if (PORTCbits.RC6 == 0 && j2 == 1){
                    PORTB *= 2;
                    j2 = 0;
                }
            }
            else if (PORTB == 0x00){
                j2 = 1;
                if (PORTCbits.RC6 == 0 && j2 == 1){
                    PORTB += 1;
                    j2 = 0;
                }
            }
            else if (PORTCbits.RC6 == 1 && PORTB == 0x80){
                j2 = 1;
                if (PORTCbits.RC6 == 0 && j2 == 1){
                    PORTB = 0;
                    PORTCbits.RC7 = 1;
                    PORTD = 0xA4;
                    j2 = 0;
                    delay_sem();
                }
            }
        }
    }
    return;
}

void setup(void){
    TRISA = 0x00;
    TRISB = 0x00;
    TRISC = 0x49;
    TRISD = 0x00;
    PORTA = 0x00;
    PORTB = 0x00;
    PORTD = 0xFF;
    PORTC = 0x00;
    ANSEL = 0x00;
    ANSELH = 0x00;
    return;
}

void delay_sem(void){
    for (i = 0; i <= 255; i ++){
        contador += contador;
        for (j = 0; j <= 100; j ++){
            contador2 += contador2;
        }
    }
}

void semaforo(void){
    if (PORTCbits.RC3 != 0){
        //delay_ms();
        PORTD = 0xB0;
        PORTCbits.RC2 = 1;
        PORTCbits.RC4 = 0;
        PORTCbits.RC5 = 0;
        delay_sem();
        PORTD = 0xA4;
        PORTCbits.RC2 = 0;
        PORTCbits.RC4 = 1;
        PORTCbits.RC5 = 0;
        delay_sem();
        PORTD = 0xF9;
        PORTCbits.RC2 = 0;
        PORTCbits.RC4 = 0;
        PORTCbits.RC5 = 1;
        delay_sem();
        PORTD = 0xC0;
        PORTCbits.RC2 = 1;
        PORTCbits.RC5 = 1;
        PORTCbits.RC4 = 1;
        //delay_sem();
    }
    return;
}
